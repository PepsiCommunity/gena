import datetime
import re
from typing import Dict
import nextcord
from nextcord.ext import commands
import os
from dotenv import load_dotenv
from commands import *
from nextcord import Interaction, SlashOption
from music import Music
import random
import json
from ai.chat import Chat
import aiohttp
import asyncio
import emoji
import io
from mi.gen import generate_mi

load_dotenv()
API_TOKEN = os.getenv("TOKEN")

guild = nextcord.Guild
client = commands.Bot(intents=nextcord.Intents.all())
music_class: Music = Music(client)

roles_channel_id = 1177321519169421393  # id –∫–∞–Ω–∞–ª–∞ —Ä–æ–ª–µ–π
server_id = 1176560233984831591  # Id —Å–µ—Ä–≤–µ—Ä–∞
likes_list = [
    1176595296764055684,
    1258849737117925438,
    1177500296918872074,
    1179153688632246282,
    1249123146498445402
]  # –ì–¥–µ –±–æ—Ç –ª–∞–π–∫–∞–µ—Ç
protected_chats = [1179153688632246282,
                   1176595296764055684, 1177500296918872074]
voice_settings_id = 1177551237860839444
roles = {"üëç": 1176574853894115408, "‚ù§Ô∏è": 1269355401212727297}
voice_channels: dict[int, Voice] = {}
chats: Dict[int, Chat] = {}


@client.event
async def on_ready():
    await client.change_presence(
        status=nextcord.Status.dnd,
        activity=nextcord.Activity(
            type=nextcord.ActivityType.watching, name="—Ç–µ–ª–µ–≤–∏–∑–æ—Ä –∏ –∫—É—Ä–∏—Ç –∫–æ—Å—è—á–æ–∫"
        ),
    )


@client.event
async def on_member_update(before, after):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–æ–ª—è—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞
    if before.roles != after.roles:
        added_roles = after.roles

        data = {}
        with open("roles.json") as f:
            data = json.load(f)
            data[str(after.id)] = [role.id for role in added_roles]

        with open("roles.json", "w") as f:
            json.dump(data, f, indent=4)


@client.event
async def on_member_join(member: nextcord.Member):
    data = {}
    with open("roles.json") as f:
        data = json.load(f)

    if str(member.id) in data:
        for role_id in data[str(member.id)]:
            try:
                role = member.guild.get_role(role_id)
                await member.add_roles(role)
            except:
                pass

    system_channel = member.guild.system_channel
    message = await Chat(client, system_channel).single_message(
        {
            'role': 'system',
            'content': f'–ö –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ `{member.global_name}`, –≤—Å—Ç—Ä–µ—Ç—å –µ–≥–æ —Ç–µ–ø–ª—ã–º–∏ —Å–ª–æ–≤–∞–º–∏'
        }
    )
    await system_channel.send(f'{member.mention} {message}')


@client.event
async def on_member_remove(member: nextcord.Member):
    messages = [
        f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {member.mention}",
        f"{member.mention} —Ä–∞—Å—Ç–≤–æ—Ä–∏–ª—Å—è",
        f"{member.mention} –ø—Ä–æ–ø–∞–ª",
        f"{member.mention} –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–æ—Ü–µ—Å—Å",
        f"{member.mention} —Å–ª–æ–≤–∏–ª segmentation fault",
        f"{member.mention} –æ—Ç–ø—Ä–∞–≤–∏–ª SIGTERM —Å–∞–º–æ–º—É —Å–µ–±–µ",
        f"{member.mention} –≤—ã–ø–æ–ª–Ω–∏–ª rm -rf / --no-preserve-root",
        f"{member.mention} –ø–æ–π–º–∞–ª fatal error –∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è",
        f"{member.mention} –∑–∞–≤–∏—Å –∏ –±—ã–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω",
        f"{member.mention} –∑–∞–∫–æ–º–º–∏—Ç–∏–ª —Å–≤–æ—ë –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ",
        f"{member.mention} –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ /dev/null",
        f"{member.mention} –≤—ã–ø–æ–ª–Ω–∏–ª rage quit()",
        f"{member.mention} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞",
        f"{member.mention} –∑–∞–∫—Ä—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥ </life>",
        f"{member.mention} –Ω–µ –ø—Ä–æ—à—ë–ª unit-—Ç–µ—Å—Ç—ã –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ",
        f"{member.mention} —Å–ª–æ–≤–∏–ª 404: User Not Found",
        f"{member.mention} –ø–æ–ª—É—á–∏–ª Error 410: Gone",
        f"{member.mention} –æ—Ç–∫–ª—é—á–∏–ª—Å—è —Å –∫–æ–¥–æ–º 0",
        f"{member.mention} —É—à—ë–ª –≤ –æ—Ñ–ª–∞–π–Ω-–º–æ–¥",
        f"{member.mention} –æ—Ç–∫–∞—Ç–∏–ª —Å–µ–±—è –¥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏",
        f"{member.mention} –ø–æ–π–º–∞–ª BSOD –∏ —É—à—ë–ª –≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É",
        f"{member.mention} —Å–¥–µ–ª–∞–ª git push --force –≤ —Ä–µ–∞–ª—å–Ω—É—é –∂–∏–∑–Ω—å",
        f"{member.mention} –≤—ã–ø–æ–ª–Ω–∏–ª exit() –±–µ–∑ return",
        f"{member.mention} —Å–ª–æ–≤–∏–ª NullPointerException",
        f"{member.mention} –¥–æ—Å—Ç–∏–≥ end of file",
        f"{member.mention} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        f"{member.mention} –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ –±—ç–∫–∞–ø –∏ –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è",
        f"{member.mention} –≤—ã–∫–ª—é—á–∏–ª –¥–µ–±–∞–≥-—Ä–µ–∂–∏–º –∏ –∏—Å—á–µ–∑",
        f"{member.mention} —Å–±—Ä–æ—Å–∏–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
        f"{member.mention} —É—à—ë–ª –≤ suspend mode",
        f"{member.mention} –ø–æ—Å—Ç–∞–≤–∏–ª —Å–µ–±—è –Ω–∞ cronjob —Ä–∞–∑ –≤ –Ω–∏–∫–æ–≥–¥–∞",
        f"{member.mention} –≤—ã–ø–æ–ª–Ω–∏–ª kill -9 –Ω–∞ —Å–≤–æ—ë —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
        f"{member.mention} –≤—ã–∫–ª—é—á–∏–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–ø–∞–ª",
        f"{member.mention} –≤—ã–ø–æ–ª–Ω–∏–ª sudo poweroff",
        f"{member.mention} –±—ã–ª –∑–∞–∫–æ–º–º–∏—á–µ–Ω, –Ω–æ –Ω–µ –≤ —ç—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π",
        f"{member.mention} –Ω–∞—à—ë–ª –±–∞–≥ –≤ –∂–∏–∑–Ω–∏ –∏ –æ—Ç–≤–∞–ª–∏–ª—Å—è",
        f"{member.mention} –≤—ã–∑–≤–∞–ª undefined behavior –∏ –∏—Å—á–µ–∑",
        f"{member.mention} —Å–ª–æ–≤–∏–ª kernel panic –∏ –∑–∞–≤–∏—Å",
        f"{member.mention} –∑–∞–ø—É—Å—Ç–∏–ª fork() –±–µ–∑ exec() –∏ –ø–æ—Ç–µ—Ä—è–ª—Å—è",
        f"{member.mention} –≤—ã–ø–æ–ª–Ω–∏–ª git reset --hard –∏ –∏—Å—á–µ–∑",
        f"{member.mention} —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏ –∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è",
        f"{member.mention} –æ–±–Ω–æ–≤–∏–ª—Å—è –∏ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä",
        f"{member.mention} –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –º–∞—Å—Å–∏–≤–∞",
        f"{member.mention} –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π –∂–∏–∑–Ω–∏",
        f"{member.mention} –≤—ã–∑–≤–∞–ª recursion() –±–µ–∑ –≤—ã—Ö–æ–¥–∞",
        f"{member.mention} –¥–æ—Å—Ç–∏–≥ –ø—Ä–µ–¥–µ–ª–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π –∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è",
        f"{member.mention} –≤—Å—Ç—Ä–µ—Ç–∏–ª unexpected token –∏ –ø—Ä–æ–ø–∞–ª",
        f"{member.mention} –∑–∞–∫—Ä—ã–ª –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ –∏ —É—à—ë–ª",
        f"{member.mention} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –∏–∑-–∑–∞ –ø–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤",
        f"{member.mention} —Å–æ–≤–µ—Ä—à–∏–ª force quit()",
        f"{member.mention} –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ zombie process",
        f"{member.mention} –≤—ã–∑–≤–∞–ª delete this –∏ –∏—Å—á–µ–∑"
    ]

    await member.guild.system_channel.send(random.choice(messages))


@client.event
async def on_voice_state_update(member: nextcord.Member, before: nextcord.VoiceState, after: nextcord.VoiceState):
    channel = after.channel

    if channel != None:
        if channel.name == '‚ûï–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª':
            channel = await channel.clone(name=f"–ö–∞–Ω–∞–ª {member.global_name or member.nick or member.name}")
            await member.move_to(channel)
            voice_channels.update({channel.id: Voice(member)})

    if before.channel and not before.channel.members and before.channel.name != '‚ûï–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª':
        await before.channel.delete()
        if before.channel.id in voice_channels:
            voice_channels.pop(before.channel.id)

    if before.channel != None:
        if before.channel.id in voice_channels and \
                voice_channels[before.channel.id].admin != None and \
                voice_channels[before.channel.id].admin.id == member.id:
            voice_channels[before.channel.id].admin = None

    voice_state = member.guild.voice_client
    if voice_state is not None and len(voice_state.channel.members) == 1:
        await voice_state.disconnect()


@client.event
async def on_raw_reaction_add(payload: nextcord.RawReactionActionEvent):
    if payload.channel_id == roles_channel_id:
        member = payload.member
        server = client.get_guild(payload.guild_id)

        if payload.emoji.name in roles:
            role = server.get_role(roles[payload.emoji.name])
            await member.add_roles(role)


@client.event
async def on_raw_reaction_remove(payload: nextcord.RawReactionActionEvent):
    if payload.channel_id == roles_channel_id:
        member_id = payload.user_id

        server = client.get_guild(payload.guild_id)
        member = server.get_member(member_id)

        if payload.emoji.name in roles:
            role = server.get_role(roles[payload.emoji.name])
            await member.remove_roles(role)


def check_message(message: nextcord.Message):
    return message.attachments == [] and "http" not in message.content


def check_forwarded(message: nextcord.Message):
    for mess in message.snapshots:
        if not check_message(mess):
            return False
    return True


@client.event
async def on_message(message: nextcord.Message):
    if message.author == client.user:
        if message.channel.id in protected_chats:
            await message.delete()
        return

    deleted = False
    if message.channel.id in protected_chats:
        if check_message(message) and check_forwarded(message):
            await message.delete()
            deleted = True

    if message.channel.id in likes_list and not deleted:
        emoji = client.get_emoji(1358422026867572908)
        await message.add_reaction(emoji)
        await asyncio.sleep(0.5)
        await message.add_reaction("\N{THUMBS UP SIGN}")
        await asyncio.sleep(0.5)
        await message.add_reaction("\N{THUMBS DOWN SIGN}")

    channel = message.channel
    if isinstance(channel, nextcord.Thread):
        if channel.owner == client.user:
            chat = chats.get(channel.id, Chat(client, channel))

            async with channel.typing():
                reply_mess = ''
                if message.reference:
                    r = await message.channel.fetch_message(message.reference.message_id)
                    reply_mess = f'<Replies to {r.author.global_name}\'s message> '

                response = await chat.message(f'{message.author.global_name}:{message.author.id}:{reply_mess}{message.content or "<attachment>"}')
                max_l = 1999
                for i in range(0, len(response), max_l):
                    if i == 0:
                        await message.reply(response[i:i+max_l])
                    else:
                        await message.channel.send(response[i:i+max_l])


@client.slash_command(description="–ù–∞–π—Ç–∏ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏")
async def wikipedia(interaction: Interaction, promt: str):
    await interaction.response.send_message(wiki_search(promt))


@client.slash_command(description="–ò–¥–∏—Ç–µ –Ω–∞—Ö—É–π", guild_ids=[1213234812458897460])
async def ping(interaction: Interaction, user: nextcord.User, count: int):
    await interaction.response.defer()
    for _ in range(count):
        await interaction.channel.send(f'<@{user.id}>')
        await asyncio.sleep(0.1)


@client.slash_command(description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
async def voice(interaction: Interaction): ...


@voice.subcommand(description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (0-99)")
async def limit(interaction: Interaction, amount: int):
    if amount > 99:
        await interaction.response.send_message(
            "**–ó–Ω–∞—á–µ–Ω–∏–µ amount –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 99**\n–ì–¥–µ 0 ‚Äî –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
            ephemeral=True,
        )
        return

    if interaction.channel.name != "voice-settings":
        await interaction.response.send_message(f"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ!", ephemeral=True)
        return

    if interaction.user.voice == None:
        await interaction.response.send_message(f"–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
        return

    if voice_channels[interaction.user.voice.channel.id].admin.id != interaction.user.id:
        await interaction.response.send_message(f"–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞!", ephemeral=True)
        return

    voice_channel = client.get_channel(interaction.user.voice.channel.id)
    await voice_channel.edit(user_limit=amount)
    await interaction.response.send_message(
        (
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–µ–Ω–æ –¥–æ {amount}"
            if amount != 0
            else "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–∫–ª—é—á–µ–Ω–æ!"
        ),
        ephemeral=True,
    )


@voice.subcommand(description="–°—Ç–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
async def claim(interaction: Interaction):

    if interaction.channel.name != "voice-settings":
        await interaction.response.send_message(f"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ!", ephemeral=True)
        return

    if interaction.user.voice == None:
        await interaction.response.send_message(f"–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
        return

    if voice_channels[interaction.user.voice.channel.id].admin:
        await interaction.response.send_message(f"–£ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —É–∂–µ –µ—Å—Ç—å –≤–ª–∞–¥–µ–ª–µ—Ü!", ephemeral=True)
        return

    voice_id = interaction.user.voice.channel.id

    voice_channels[voice_id].admin = interaction.user
    await interaction.response.send_message("**–í—ã —Å—Ç–∞–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞!**", ephemeral=True)

    voice_channel = client.get_channel(voice_id)
    await voice_channel.edit(name=f"–ö–∞–Ω–∞–ª {interaction.user.name}")


@client.slash_command(description="–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç")
async def music(interaction: Interaction):
    """
    This is the main slash command that will be the prefix of all commands below.
    This will never get called since it has subcommands.
    """


@music.subcommand(description="–î–æ–±–∞–≤–∏—Ç—å –º—É–∑—ã–∫—É –≤ –æ—á–µ—Ä–µ–¥—å")
async def play(interaction: Interaction, promt: str):
    if not interaction.user.voice:
        await interaction.response.send_message("–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
        return

    await music_class.add_to_query(interaction=interaction, promt=promt)
    await music_class.recursive_play(guild=interaction.guild, user=interaction.user, textchannel=interaction.channel)


@music.subcommand(description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º—É–∑—ã–∫—É –∏ –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å")
async def stop(interaction: Interaction):
    if music_class.vp != None:
        await interaction.guild.voice_client.disconnect()

        music_class.query = []
        music_class.vp.stop()

        await interaction.response.send_message("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await interaction.response.send_message("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!")


@music.subcommand(description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫")
async def skip(interaction: Interaction):
    music_class.vp.stop()
    await music_class.play(guild=interaction.guild, user=interaction.user, textchannel=interaction.channel)
    await interaction.response.send_message("–ü—Ä–æ–ø—É—â–µ–Ω–æ!")


@client.slash_command(description="–¶–≤–µ—Ç –Ω–∏–∫–∞")
async def color(interaction: Interaction):
    # –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥–∞, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ /color
    ...


@color.subcommand(description="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç")
async def change(interaction: Interaction, hex_color: str):
    # –≠—Ç–æ —Å–ª–µ—à-–ü–û–î–∫–æ–º–∞–Ω–¥–∞ —É –∫–æ–º–∞–Ω–¥—ã /color, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ /color change
    # hex_color: str –≤—ã—à–µ, —ç—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥—Å –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã
    roles = [x for x in interaction.user.roles if x.name == "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ü–≤–µ—Ç"]
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ü–≤–µ—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π —á–µ–ª–æ–≤–µ–∫–∞ (–ø–æ –∏–¥–µ–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∞, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π)

    hex_color_redacted = hex_color.replace("#", "")  # –ñ–∞—Ö–∞–µ–º —Ä–µ—à—ë—Ç–∫—É –∏–∑ —Ü–≤–µ—Ç–∞
    if len(hex_color_redacted) != 6:  # –ï—Å–ª–∏ —Ü–≤–µ—Ç —Å–æ—Å—Ç–æ–∏—Ç –Ω–µ –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤ - –≤—ã—Ö–æ–¥–∏–º
        await interaction.response.send_message(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HEX —Ü–≤–µ—Ç: {hex_color}")
        return

    try:
        r, g, b = (int(hex_color_redacted[x:x + 2], 16)
                   for x in range(0, 6, 2))
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É —Ü–≤–µ—Ç—É –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 16 –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤ 10
    except:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        await interaction.response.send_message(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HEX —Ü–≤–µ—Ç: {hex_color}")
        return

    if roles:  # –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –∏–º–µ–µ—Ç —Ü–≤–µ—Ç–Ω—É—é —Ä–æ–ª—å
        # –ë–µ—Ä—ë–º —É –Ω–µ–≥–æ —Å–∞–º—É—é –≤—ã—Å–æ–∫—É—é –≤ —Å–ø–∏—Å–∫–µ —Ä–æ–ª—å
        color_role = interaction.guild.get_role(roles[-1].id)
        bot_role_pos = (interaction.guild.get_member(
            client.user.id).roles[-1].position)  # –ü–æ–∑–∏—Ü–∏—è —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π —Ä–æ–ª–∏ –±–æ—Ç–∞
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–æ–ª–∏ —Ü–≤–µ—Ç –≤ —Ä–≥–± –∏ –ø–æ–∑–∏—Ü–∏—é –Ω–∞ 1 –Ω–∏–∂–µ —Ä–æ–ª–∏ –±–æ—Ç–∞
        await color_role.edit(color=nextcord.Color.from_rgb(r, g, b), position=bot_role_pos - 1)

        embed = nextcord.Embed(  # –¢—É—Ç –ø—Ä–æ—Å—Ç–æ —ç–º–±–µ–¥
            title=f"–¶–≤–µ—Ç –Ω–∏–∫–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ #{hex_color_redacted}",
            color=nextcord.Color.from_rgb(r, g, b),
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        await interaction.response.send_message(embed=embed)

    else:  # –ï—Å–ª–∏ —Ä–æ–ª–µ–π –Ω–µ—Ç
        role = await interaction.guild.create_role(
            name="–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ü–≤–µ—Ç",
            color=nextcord.Color.from_rgb(r, g, b),
            mentionable=False,
        )  # –°–æ–∑–¥–∞—ë–º —Ä–æ–ª—å —Å —Ü–≤–µ—Ç–æ–º –∏ –∏–º–µ–Ω–µ–º
        bot_role_pos = interaction.guild.get_member(
            client.user.id).roles[-1].position  # –ü–æ–∑–∏—Ü–∏—è —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π —Ä–æ–ª–∏ –±–æ—Ç–∞
        await role.edit(position=bot_role_pos - 1)
        # –î–µ–ª–∞–µ–º —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—É—Ç, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ –≤—Å—ë –≤ —Å–ø–∏—Å–∫–µ —Å–¥–≤–∏–Ω–µ—Ç—Å—è, –∏ —á—Ç–æ –±—ã –±—ã—Ç—å —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω–Ω—ã–º, –¥–µ–ª–∞–µ–º —ç—Ç–æ —Ç—É—Ç
        await interaction.user.add_roles(role)  # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ–∫—É —Ä–æ–ª—å

        embed = nextcord.Embed(  # –¢–æ–∂–µ —ç–º–±–µ–¥
            title=f"–¶–≤–µ—Ç –Ω–∏–∫–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ #{hex_color_redacted}",
            color=nextcord.Color.from_rgb(r, g, b),
        )
        await interaction.response.send_message(embed=embed)  # –¢–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–∫–∞


@color.subcommand(description="–£–¥–∞–ª–∏—Ç—å —Ü–≤–µ—Ç")
async def delete(interaction: Interaction):
    roles = [x for x in interaction.user.roles if x.name == "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ü–≤–µ—Ç"]
    if not roles:
        await interaction.response.send_message(f"–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ü–≤–µ—Ç –Ω–∏–∫–∞")
        return

    color_role = interaction.guild.get_role(roles[-1].id)
    await color_role.delete()

    await interaction.response.send_message("–¶–≤–µ—Ç —É–¥–∞–ª—ë–Ω")


options = {}
with open('wfs.json') as f:
    waifus = json.load(f)
    for w_type in waifus:
        for category in waifus[w_type]:
            options[f"{w_type} {category}"] = f"{w_type}-{category}"


@client.slash_command(name='waifu', description='Get waifu from waifu.pics')
async def waifu(
    interaction: Interaction,
    category: str = SlashOption(
        name="category",
        description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        choices=options,
    ),
):
    w_type, w_category = category.split('-')
    if w_type == "NSFW" and not interaction.channel.nsfw:
        await interaction.response.send_message('–í—ã –Ω–µ –≤ NSFW –∫–∞–Ω–∞–ª–µ!', ephemeral=True)
        return

    url = ''
    async with aiohttp.ClientSession("https://api.waifu.pics") as session:
        async with session.get(f"/{w_type.lower()}/{w_category}") as response:
            if response.status == 200:
                url = (await response.json())['url']

    if not url:
        await interaction.response.send_message('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!', ephemeral=True)
        return
    await interaction.response.send_message(f"|| {url} ||")


@client.slash_command(name='mix', description='Mix two emojis')
async def mix(
    interaction: Interaction,
    emoji_1: str,
    emoji_2: str
):
    if emoji_1 not in emoji.EMOJI_DATA:
        await interaction.response.send_message("–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —ç–º–æ–¥–∂–∏!", ephemeral=True)
        return

    if emoji_2 not in emoji.EMOJI_DATA:
        await interaction.response.send_message("–í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —ç–º–æ–¥–∂–∏!", ephemeral=True)
        return

    await interaction.response.send_message(f"https://emojik.vercel.app/s/{emoji_1}_{emoji_2}?size=48")

EXCLUDED_USERS = {707270170837778432, 472714545723342848,
                  730885117656039466, 1299512869649645634, 1265743807626874890, 1177230100685660170, 280414197706391562}


@client.slash_command(name='steal_emoji', description='–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç–º–æ–¥–∂–∏ —Å –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –¥—Ä—É–≥–æ–π! –§–æ—Ä–º–∞—Ç <:name:id>')
async def se(
    interaction: Interaction,
    emoji: str,
):
    if not emoji.startswith('<:') or not emoji.endswith('>'):
        await interaction.response.send_message('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–º–æ–¥–∂–∏!', ephemeral=True)
        return

    emoji_parts = emoji.replace('<:', '').replace('>', '').split(':')

    if len(emoji_parts) != 2:
        await interaction.response.send_message('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–º–æ–¥–∂–∏!', ephemeral=True)
        return

    emoji_url = f"https://cdn.discordapp.com/emojis/{emoji_parts[1]}"
    emoji_data = None

    async with aiohttp.ClientSession() as session:
        async with session.get(emoji_url + '.gif') as resp:
            if resp.status == 200:
                emoji_data = await resp.read()

        if not emoji_data:
            async with session.get(emoji_url + '.png') as resp:
                if resp.status == 200:
                    emoji_data = await resp.read()

    if not emoji_data:
        await interaction.response.send_message('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∂–∏! –í–æ–∑–º–æ–∂–Ω–æ, —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π id', ephemeral=True)
        return

    try:
        new_emoji = await interaction.guild.create_custom_emoji(name=emoji_parts[0], image=emoji_data)
    except Exception:
        await interaction.response.send_message('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–º–æ–¥–∂–∏! –í–æ–∑–º–æ–∂–Ω–æ, —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–æ–¥–∂–∏', ephemeral=True)
        return

    embed = nextcord.Embed(
        title="–≠–º–æ–¥–∂–∏ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ",
        description=f"–≠–º–æ–¥–∂–∏ {emoji} –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä {interaction.guild.name}",
        color=nextcord.Color.blue()
    )
    embed.set_author(name=emoji_parts[0], icon_url=new_emoji.url)

    await interaction.response.send_message(embed=embed)


@client.slash_command(name='nextjs', description='Generate Next.Js error badge')
async def mi(
    interaction: Interaction,
    string: str,
):
    if not string:
        await interaction.response.send_message('–°—Ç—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!', ephemeral=True)
        return

    if len(string) > 200:
        await interaction.response.send_message('–°—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è', ephemeral=True)
        return

    mi = generate_mi(string)
    mi = mi.resize((mi.width // 7, mi.height // 7))
    image_bytes = io.BytesIO()
    mi.save(image_bytes, format="PNG")
    image_bytes.seek(0)

    await interaction.response.send_message("", file=nextcord.File(fp=image_bytes, filename=f"{string}.png"))


@client.slash_command(description="DeepSeek")
async def ai(interaction: Interaction): ...


@ai.subcommand(description="Deletes current chat")
async def delete(interaction: Interaction):

    channel = interaction.channel
    if not isinstance(channel, nextcord.Thread):
        await interaction.send('**[ERROR]**: –≠—Ç–æ –Ω–µ –≤–µ—Ç–∫–∞!')
        return

    if channel.owner != client.user:
        await interaction.send('**[ERROR]**: –≠—Ç–∞ –≤–µ—Ç–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–æ—Ç—É!')
        return

    chat = chats.get(interaction.channel.id, Chat(client, channel))
    try:
        chat.end_chat()
    except Exception as e:
        await interaction.send(f'**[ERROR]**: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}!')
        return
    await channel.delete()


@ai.subcommand(description="Start conversation")
async def start(
    interaction: Interaction,
    instructions: str = SlashOption(
        description="–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±–æ—Ç—É (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é)",
        required=False,
        default=''
    ),
    is_private: bool = SlashOption(
        description="–°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é –≤–µ—Ç–∫—É?",
        required=False,
        default=False
    )
):
    embed = nextcord.Embed(title="–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω")
    embed.set_author(name=interaction.user.global_name,
                     icon_url=interaction.user.avatar.url)

    embed.add_field(name="Instructions",
                    value=instructions or "Default",
                    inline=False)

    embed.add_field(name="Is private",
                    value=is_private,
                    inline=False)

    await interaction.send(embed=embed, ephemeral=is_private)
    thread = await interaction.channel.create_thread(
        name="„ÄåAI„ÄçConversation",
        type=nextcord.ChannelType.private_thread if is_private else nextcord.ChannelType.public_thread
    )
    await thread.add_user(interaction.user)

    chats[thread.id] = Chat(client, thread)
    chat = chats.get(thread.id)

    async with thread.typing():
        chat.start_chat(
            base_instruction=f"–¢—ã ‚Äì –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –Ω–∞ –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è {interaction.guild.name}. " +
            "–í —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown. –¢–µ–±—è –∑–æ–≤—É—Ç –ì–µ–Ω–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –¥–∏–∞–ª–æ–≥ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ.",
            instructions=instructions
        )
    response = await chat.message(f'{interaction.user.global_name}:{interaction.user.id}:–ü—Ä–∏–≤–µ—Ç!')
    await thread.send(response)


def run_bot():
    loop = asyncio.get_event_loop()
    loop.run_until_complete(client.start(API_TOKEN))


run_bot()
