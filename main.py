import nextcord
from nextcord.ext import commands
import os
from dotenv import load_dotenv
from commands import *
from nextcord import Interaction, SlashOption
from music import Music
import random
import json
import time
import aiohttp
import asyncio

load_dotenv()
API_TOKEN = os.getenv("TOKEN")

guild = nextcord.Guild
client = commands.Bot(intents=nextcord.Intents.all())
music_class: Music = Music(client)


roles_channel_id = 1177321519169421393  # id –∫–∞–Ω–∞–ª–∞ —Ä–æ–ª–µ–π
server_id = 1176560233984831591  # Id —Å–µ—Ä–≤–µ—Ä–∞
likes_list = [
    1176595296764055684,
    1258849737117925438,
    1177500296918872074,
    1179153688632246282,
    1249123146498445402
]  # –ì–¥–µ –±–æ—Ç –ª–∞–π–∫–∞–µ—Ç
protected_chats = [1179153688632246282,
                   1176595296764055684, 1177500296918872074]
voice_settings_id = 1177551237860839444

roles = {"üëç": 1176574853894115408, "‚ù§Ô∏è": 1269355401212727297}

spamblock = {}


class Guild_Spam_Protection:
    def __init__(self, member_id):
        self.member_id = member_id
        self.start_time = time.time()
        self.messages_count = 0


descriptions = [
    "–ü–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞—Ç—å!",
    "Created by AndcoolSystems",
    "–Ø —Ö–æ—á—É —É—Å–ª—ã—à–∞—Ç—å —Ç–≤–æ–π –≥–æ–ª–æ—Å!",
    "–ü–æ—á–µ–º—É —Ä–µ–∞–∫—Ü–∏–π —Ç–∞–∫ –º–∞–ª–æ?",
    "–ê –æ–Ω–∏ —Å–¥–∞–ª–∏—Å—å?",
    "–ì–∞–π—Å, –∞–π —Ö—ç–≤ —ç –±—ç–¥ –Ω—å—é–≤—Å",
    "–ß–µ–±—É—Ä–∞—à–∫–∞ –≤—ã–∫—É—Ä–∏–ª –≤–µ—Å—å –∫–æ—Å—è—á–æ–∫üò¢",
    "–ú–Ω–µ —Ç–∞–∫ –∏ –Ω–µ –ø—Ä–∏–Ω–µ—Å–ª–∏ –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ!",
    "–ü–æ—Ä–∞ –ø–æ–º—ã—Ç—å—Å—è!",
    "–í—Ä–µ–º—è –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏!",
    "–ü–æ—á–µ–º—É –≤—Å–µ –º–æ–ª—á–∞—Ç?",
    "–Ø –ù–ï –õ–Æ–ë–õ–Æ –ö–ê–ü–°!",
    "–û–ë–©–ê–¢–¨–°–Ø –ö–ê–ü–°–û–ú ‚Äì –ù–ò–ó–ö–û",
    "–Ø –Ω–µ –∑–Ω–∞—é —Ä–µ—Ü–µ–ø—Ç –ø–æ—Ä–æ—Ö–∞",
    ":clueless:",
    "–¶–≤–µ—Ç–∞—Å—Ç—ã–µ –Ω–∏–∫–∏!",
]

voice_channels: dict[int, Voice] = {}


@client.event
async def on_ready():
    await client.change_presence(
        status=nextcord.Status.dnd,
        activity=nextcord.Activity(
            type=nextcord.ActivityType.watching, name="—Ç–µ–ª–µ–≤–∏–∑–æ—Ä –∏ –∫—É—Ä–∏—Ç –∫–æ—Å—è—á–æ–∫"
        ),
    )
    async with aiohttp.ClientSession("https://discord.com") as session:
        await session.patch(
            f"/api/v9/applications/@me",
            json={"description": random.choice(descriptions)},
            headers={
                "Host": "discord.com",
                "Authorization": "Bot " + os.getenv("TOKEN"),
            },
        )


@client.event
async def on_member_update(before, after):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–æ–ª—è—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞
    if before.roles != after.roles:
        added_roles = after.roles

        data = {}
        with open("roles.json") as f:
            data = json.load(f)
            data[str(after.id)] = [role.id for role in added_roles]

        with open("roles.json", "w") as f:
            json.dump(data, f, indent=4)


@client.event
async def on_member_join(member: nextcord.Member):
    data = {}
    with open("roles.json") as f:
        data = json.load(f)

    if str(member.id) in data:
        for role_id in data[str(member.id)]:
            try:
                role = member.guild.get_role(role_id)
                await member.add_roles(role)
            except:
                pass


@client.event
async def on_voice_state_update(member: nextcord.Member, before: nextcord.VoiceState, after: nextcord.VoiceState):
    channel = after.channel

    if channel != None:
        if channel.name == '‚ûï–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª':
            channel = await channel.clone(name=f"–ö–∞–Ω–∞–ª {member.global_name or member.nick or member.name}")
            await member.move_to(channel)
            voice_channels.update({channel.id: Voice(member)})

    if before.channel and not before.channel.members and before.channel.name != '‚ûï–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª':
        await before.channel.delete()
        if before.channel.id in voice_channels:
            voice_channels.pop(before.channel.id)

    if before.channel != None:
        if before.channel.id in voice_channels and \
                voice_channels[before.channel.id].admin != None and \
                voice_channels[before.channel.id].admin.id == member.id:
            voice_channels[before.channel.id].admin = None

    voice_state = member.guild.voice_client
    if voice_state is not None and len(voice_state.channel.members) == 1:
        await voice_state.disconnect()


@client.event
async def on_raw_reaction_add(payload: nextcord.RawReactionActionEvent):
    if payload.channel_id == roles_channel_id:
        member = payload.member
        server = client.get_guild(payload.guild_id)

        if payload.emoji.name in roles:
            role = server.get_role(roles[payload.emoji.name])
            await member.add_roles(role)


@client.event
async def on_raw_reaction_remove(payload: nextcord.RawReactionActionEvent):
    if payload.channel_id == roles_channel_id:
        member_id = payload.user_id

        server = client.get_guild(payload.guild_id)
        member = server.get_member(member_id)

        if payload.emoji.name in roles:
            role = server.get_role(roles[payload.emoji.name])
            await member.remove_roles(role)


def check_message(message: nextcord.Message):
    return message.attachments == [] and "http" not in message.content


def check_forwarded(message: nextcord.Message):
    for mess in message.snapshots:
        if not check_message(mess):
            return False
    return True


@client.event
async def on_message(message: nextcord.Message):
    if message.author == client.user:
        if message.channel.id in protected_chats:
            await message.delete()
        return

    deleted = False
    if message.channel.id in protected_chats:
        if check_message(message) and check_forwarded(message):
            await message.delete()
            deleted = True

    if message.channel.id in likes_list and not deleted:
        await message.add_reaction("\N{THUMBS UP SIGN}")
        await message.add_reaction("\N{THUMBS DOWN SIGN}")


@client.slash_command(description="–ù–∞–π—Ç–∏ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏")
async def wikipedia(interaction: Interaction, promt: str):
    await interaction.response.send_message(wiki_search(promt))


@client.slash_command(description="–ò–¥–∏—Ç–µ –Ω–∞—Ö—É–π", guild_ids=[1213234812458897460])
async def ping(interaction: Interaction, user: nextcord.User, count: int):
    await interaction.response.defer()
    for _ in range(count):
        await interaction.channel.send(f'<@{user.id}>')
        await asyncio.sleep(0.1)


@client.slash_command(description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
async def voice(interaction: Interaction): ...


@voice.subcommand(description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (0-99)")
async def limit(interaction: Interaction, amount: int):
    if amount > 99:
        await interaction.response.send_message(
            "**–ó–Ω–∞—á–µ–Ω–∏–µ amount –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 99**\n–ì–¥–µ 0 ‚Äî –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
            ephemeral=True,
        )
        return

    if interaction.channel.name != "voice-settings":
        await interaction.response.send_message(f"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ!", ephemeral=True)
        return

    if interaction.user.voice == None:
        await interaction.response.send_message(f"–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
        return

    if voice_channels[interaction.user.voice.channel.id].admin.id != interaction.user.id:
        await interaction.response.send_message(f"–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞!", ephemeral=True)
        return

    voice_channel = client.get_channel(interaction.user.voice.channel.id)
    await voice_channel.edit(user_limit=amount)
    await interaction.response.send_message(
        (
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–µ–Ω–æ –¥–æ {amount}"
            if amount != 0
            else "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–∫–ª—é—á–µ–Ω–æ!"
        ),
        ephemeral=True,
    )


@voice.subcommand(description="–°—Ç–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
async def claim(interaction: Interaction):

    if interaction.channel.name != "voice-settings":
        await interaction.response.send_message(f"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ!", ephemeral=True)
        return

    if interaction.user.voice == None:
        await interaction.response.send_message(f"–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
        return

    if voice_channels[interaction.user.voice.channel.id].admin:
        await interaction.response.send_message(f"–£ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —É–∂–µ –µ—Å—Ç—å –≤–ª–∞–¥–µ–ª–µ—Ü!", ephemeral=True)
        return

    voice_id = interaction.user.voice.channel.id

    voice_channels[voice_id].admin = interaction.user
    await interaction.response.send_message("**–í—ã —Å—Ç–∞–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞!**", ephemeral=True)

    voice_channel = client.get_channel(voice_id)
    await voice_channel.edit(name=f"–ö–∞–Ω–∞–ª {interaction.user.name}")


@client.slash_command(description="–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç")
async def music(interaction: Interaction):
    """
    This is the main slash command that will be the prefix of all commands below.
    This will never get called since it has subcommands.
    """


@music.subcommand(description="–î–æ–±–∞–≤–∏—Ç—å –º—É–∑—ã–∫—É –≤ –æ—á–µ—Ä–µ–¥—å")
async def play(interaction: Interaction, promt: str):
    if not interaction.user.voice:
        await interaction.response.send_message("–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
        return

    await music_class.add_to_query(interaction=interaction, promt=promt)
    await music_class.recursive_play(guild=interaction.guild, user=interaction.user, textchannel=interaction.channel)


@music.subcommand(description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º—É–∑—ã–∫—É –∏ –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å")
async def stop(interaction: Interaction):
    if music_class.vp != None:
        await interaction.guild.voice_client.disconnect()

        music_class.query = []
        music_class.vp.stop()

        await interaction.response.send_message("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await interaction.response.send_message("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!")


@music.subcommand(description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫")
async def skip(interaction: Interaction):
    music_class.vp.stop()
    await music_class.play(guild=interaction.guild, user=interaction.user, textchannel=interaction.channel)
    await interaction.response.send_message("–ü—Ä–æ–ø—É—â–µ–Ω–æ!")


@client.slash_command(description="–¶–≤–µ—Ç –Ω–∏–∫–∞")
async def color(interaction: Interaction):
    # –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥–∞, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ /color
    ...


@color.subcommand(description="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç")
async def change(interaction: Interaction, hex_color: str):
    # –≠—Ç–æ —Å–ª–µ—à-–ü–û–î–∫–æ–º–∞–Ω–¥–∞ —É –∫–æ–º–∞–Ω–¥—ã /color, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ /color change
    # hex_color: str –≤—ã—à–µ, —ç—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥—Å –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã
    roles = [x for x in interaction.user.roles if x.name == "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ü–≤–µ—Ç"]
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ü–≤–µ—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π —á–µ–ª–æ–≤–µ–∫–∞ (–ø–æ –∏–¥–µ–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∞, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π)

    hex_color_redacted = hex_color.replace("#", "")  # –ñ–∞—Ö–∞–µ–º —Ä–µ—à—ë—Ç–∫—É –∏–∑ —Ü–≤–µ—Ç–∞
    if len(hex_color_redacted) != 6:  # –ï—Å–ª–∏ —Ü–≤–µ—Ç —Å–æ—Å—Ç–æ–∏—Ç –Ω–µ –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤ - –≤—ã—Ö–æ–¥–∏–º
        await interaction.response.send_message(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HEX —Ü–≤–µ—Ç: {hex_color}")
        return

    try:
        r, g, b = (int(hex_color_redacted[x:x + 2], 16) for x in range(0, 6, 2))
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É —Ü–≤–µ—Ç—É –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 16 –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤ 10
    except:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        await interaction.response.send_message(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HEX —Ü–≤–µ—Ç: {hex_color}")
        return

    if roles:  # –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –∏–º–µ–µ—Ç —Ü–≤–µ—Ç–Ω—É—é —Ä–æ–ª—å
        # –ë–µ—Ä—ë–º —É –Ω–µ–≥–æ —Å–∞–º—É—é –≤—ã—Å–æ–∫—É—é –≤ —Å–ø–∏—Å–∫–µ —Ä–æ–ª—å
        color_role = interaction.guild.get_role(roles[-1].id)
        bot_role_pos = (interaction.guild.get_member(client.user.id).roles[-1].position)  # –ü–æ–∑–∏—Ü–∏—è —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π —Ä–æ–ª–∏ –±–æ—Ç–∞
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–æ–ª–∏ —Ü–≤–µ—Ç –≤ —Ä–≥–± –∏ –ø–æ–∑–∏—Ü–∏—é –Ω–∞ 1 –Ω–∏–∂–µ —Ä–æ–ª–∏ –±–æ—Ç–∞
        await color_role.edit(color=nextcord.Color.from_rgb(r, g, b), position=bot_role_pos - 1)

        embed = nextcord.Embed(  # –¢—É—Ç –ø—Ä–æ—Å—Ç–æ —ç–º–±–µ–¥
            title=f"–¶–≤–µ—Ç –Ω–∏–∫–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ #{hex_color_redacted}",
            color=nextcord.Color.from_rgb(r, g, b),
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        await interaction.response.send_message(embed=embed)

    else:  # –ï—Å–ª–∏ —Ä–æ–ª–µ–π –Ω–µ—Ç
        role = await interaction.guild.create_role(
            name="–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ü–≤–µ—Ç",
            color=nextcord.Color.from_rgb(r, g, b),
            mentionable=False,
        )  # –°–æ–∑–¥–∞—ë–º —Ä–æ–ª—å —Å —Ü–≤–µ—Ç–æ–º –∏ –∏–º–µ–Ω–µ–º
        bot_role_pos = interaction.guild.get_member(
            client.user.id).roles[-1].position  # –ü–æ–∑–∏—Ü–∏—è —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π —Ä–æ–ª–∏ –±–æ—Ç–∞
        await role.edit(position=bot_role_pos - 1)
        # –î–µ–ª–∞–µ–º —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—É—Ç, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ –≤—Å—ë –≤ —Å–ø–∏—Å–∫–µ —Å–¥–≤–∏–Ω–µ—Ç—Å—è, –∏ —á—Ç–æ –±—ã –±—ã—Ç—å —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω–Ω—ã–º, –¥–µ–ª–∞–µ–º —ç—Ç–æ —Ç—É—Ç
        await interaction.user.add_roles(role)  # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ–∫—É —Ä–æ–ª—å

        embed = nextcord.Embed(  # –¢–æ–∂–µ —ç–º–±–µ–¥
            title=f"–¶–≤–µ—Ç –Ω–∏–∫–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ #{hex_color_redacted}",
            color=nextcord.Color.from_rgb(r, g, b),
        )
        await interaction.response.send_message(embed=embed)  # –¢–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–∫–∞


@color.subcommand(description="–£–¥–∞–ª–∏—Ç—å —Ü–≤–µ—Ç")
async def delete(interaction: Interaction):
    roles = [x for x in interaction.user.roles if x.name == "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ü–≤–µ—Ç"]
    if not roles:
        await interaction.response.send_message(f"–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ü–≤–µ—Ç –Ω–∏–∫–∞")
        return

    color_role = interaction.guild.get_role(roles[-1].id)
    await color_role.delete()

    await interaction.response.send_message("–¶–≤–µ—Ç —É–¥–∞–ª—ë–Ω")


options = {}
with open('wfs.json') as f:
    waifus = json.load(f)
    for w_type in waifus:
        for category in waifus[w_type]:
            options[f"{w_type} {category}"] = f"{w_type}-{category}"


@client.slash_command(name='waifu', description='Get waifu from waifu.pics')
async def waifu(
    interaction: Interaction,
    category: str = SlashOption(
        name="category",
        description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        choices=options,
    ),
):
    w_type, w_category = category.split('-')
    if w_type == "NSFW" and not interaction.channel.nsfw:
        await interaction.response.send_message('–í—ã –Ω–µ –≤ NSFW –∫–∞–Ω–∞–ª–µ!', ephemeral=True)
        return

    url = ''
    async with aiohttp.ClientSession("https://api.waifu.pics") as session:
        async with session.get(f"/{w_type.lower()}/{w_category}") as response:
            if response.status == 200:
                url = (await response.json())['url']

    if not url:
        await interaction.response.send_message('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!', ephemeral=True)
        return
    await interaction.response.send_message(f"|| {url} ||")


if __name__ == "__main__":
    client.run(API_TOKEN)
